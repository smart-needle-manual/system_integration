import vtk
import slicer

# Get the Slicer ROS2 logic and node
rosLogic = slicer.util.getModuleLogic('ROS2')
rosNode = rosLogic.GetDefaultROS2Node()

# Optional: list available subscriber types
rosNode.RegisteredROS2SubscriberNodes()

# Create subscriber for PoseArray
subShape = rosNode.CreateAndAddSubscriberNode('PoseArray', '/needle/state/current_shape')

# Create fiducial node
fid = slicer.mrmlScene.AddNewNodeByClass('vtkMRMLMarkupsFiducialNode', 'PoseArrayPoints')

# Create curve from fiducials (Python API)
markupsLogic = slicer.modules.markups.logic()
curveNode = markupsLogic.AddNewCurveNode(fid)
curveNode.SetName("NeedleShapeZ")

# Callback to update fiducials from PoseArray
def myCallback(caller=None, event=None):
    message = subShape.GetLastMessage()  # vtkTransformCollection
    num = message.GetNumberOfItems()

    # Clear old fiducials
    fid.RemoveAllMarkups()

    for i in range(num):
        transform = message.GetItemAsObject(i)
        m = vtk.vtkMatrix4x4()
        transform.GetMatrix(m)
        x, y, z = m.GetElement(0,3), m.GetElement(1,3), m.GetElement(2,3)
        fid.AddFiducial(x, y, z)

# Add observer
observerId = subShape.AddObserver('ModifiedEvent', myCallback)
