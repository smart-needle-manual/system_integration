Slicer's data model is built around a MRML scene, which is a graph of interconnected nodes. Each item in the Data module, such as subjects, studies, volumes, transforms, markups, modules,
and more is a MRML node. Nodes can reference each other. Examples: A volume node may be transformed by a transform node; a model might reference a scalar overlay volume; a segmentation can reference a master volume.

In the subject hierarchy, the subject is the top-level grouping, usually representing one patient.
Studies are optional layers often used for multiple imaging sessions.
Data nodes such as volumes and models are MRML nodes under the hierarchy.

Each hierarchy item may have references:
Parent/child relationships provide hierarchical organization in the Data tree; transform references define spatial relationships; and other child/parent node references exist,
such as segmentations referencing volumes, or models referencing transforms.

In the transform reference case, if node A is transformed by node B, nodeA's transformID is the ID of node B. When Slicer renders A, it applies transform B automatically.
When you remove a transform node, Slicer checks what nodes reference it; this is where highlighting helps. Highlight color visualizes dependency directionality. 

Green emphasizes items referencing the current item --> Incoming edges
Yellow "  "   "   "  " referenced by "   "  "   "  "  "   Outgoing " "
Light yellow "   "   " recursively referenced by the current item --> Deeper layers -- "What do I indirectly depend on"

Consider the following example:

Subject (Patient)
‚îî‚îÄ‚îÄ Study (Scan session)
     ‚îú‚îÄ‚îÄ Volume1          ‚Üê Data Node (original MRI scan)
     ‚îú‚îÄ‚îÄ Volume2          ‚Üê Data Node (registered MRI scan)
     ‚îú‚îÄ‚îÄ Segmentation1    ‚Üê Data Node (segmentation of Volume2)
     ‚îú‚îÄ‚îÄ Transform1       ‚Üê Transform Node (aligns Volume2 to Volume1)
     ‚îî‚îÄ‚îÄ Transform2       ‚Üê Transform Node (moves Transform1 to world space)

Segmentation1 (Data Node) ‚îÄ‚îÄ‚Üí Volume2 (Data Node) ‚îÄ‚îÄ‚Üí Transform1 (Transform Node) ‚îÄ‚îÄ‚Üí Transform2 (Transform Node)

Subject (Patient)
‚îî‚îÄ‚îÄ Study (Session)
     ‚îú‚îÄ‚îÄ üü© Segmentation1   ‚Üí  üü® Volume2  ‚Üí  üü® Transform1  ‚Üí  üü®‚óå Transform2
     ‚îÇ                          ‚Üë
     ‚îÇ                     Selected node
     ‚îÇ
     ‚îú‚îÄ‚îÄ Volume1  (unrelated, stays gray)
     ‚îî‚îÄ‚îÄ (All under Study)

In this example: Segmentation1 is based on Volume2 (referencing it as its master volume), Volume2 is transformed by Transform1, and Transform1 is transformed by Transform2 (a parent transform).

A plugin is any loadable, extensible component that adds functionality. Internally, msot are implemented as modules in Python or C++, or as plugins within modules.

| Type                                    | Purpose                                                               | Typical Examples                                           |
| --------------------------------------- | --------------------------------------------------------------------- | ---------------------------------------------------------- |
| **Loadable module (C++)**               | Performance-critical processing, visualization, IO                    | Volumes, Models, Segmentations, Transforms                 |
| **Scripted module (Python)**            | Custom logic and UI, fast development                                 | Segment Editor Effects, Registration plugins, AI inference |
| **CLI module (Command-Line Interface)** | Executes external command-line tools with standard I/O                | BRAINS registration, diffusion tools                       |
| **Subject hierarchy plugin**            | Extends how items appear in the Data module and how references behave | Subject hierarchy display rules, node type icons           |
| **DICOM plugin**                        | Adds support for new DICOM modalities or private tags                 | RT, PET, Ultrasound, etc.                                  |
| **Markups / Annotation plugins**        | Add new types of markups (points, curves, planes, ROI)                | Fiducials, Curve, Angle, ROI                               |
| **I/O plugins**                         | Add import/export support for new file formats                        | Custom 3D formats, medical device output                   |
| **Python scripted logic modules**       | Provide backend logic callable from Python                            | e.g., custom pipelines or AI preprocessing steps           |
| Module                | Purpose                                                                                     |
| --------------------- | ------------------------------------------------------------------------------------------- |
| **Data**              | Shows subject hierarchy and MRML nodes; handles references (the one you‚Äôve been analyzing). |
| **DICOM**             | Manages DICOM import/export, database, and plugins.                                         |
| **Transforms**        | Displays and edits transform nodes.                                                         |
| **Subject hierarchy** | Underlying logic for Data module hierarchy organization.                                    |
| Module                             | Purpose                                                  |
| ---------------------------------- | -------------------------------------------------------- |
| **Volumes**                        | Manages scalar and vector volumes, window/level display. |
| **Slice Viewer / 3D Viewer**       | Built-in display controls for visualization.             |
| **Volume Rendering**               | GPU volume rendering controls.                           |
| **Models**                         | Display and manage surface meshes (STL, OBJ, etc.).      |
| **Segmentations / Segment Editor** | Create, edit, and manage segmentation nodes.             |
| Module                                            | Purpose                                  |
| ------------------------------------------------- | ---------------------------------------- |
| **Transforms**                                    | View, edit, and combine transform nodes. |
| **Landmark Registration / Fiducial Registration** | Registration via markups.                |
| **General Registration (BRAINS)**                 | Advanced CLI-based registration.         |
| Module                 | Purpose                                         |
| ---------------------- | ----------------------------------------------- |
| **Label Statistics**   | Compute voxel counts and volumes for labelmaps. |
| **Segment Statistics** | Compute measurements for segmentations.         |
| **PET DICOM tools**    | Quantify SUV and related measures.              |
| Module                          | Purpose                                      |
| ------------------------------- | -------------------------------------------- |
| **Python Interactor**           | Console access to MRML scene and Python API. |
| **Sample Data**                 | Loads example datasets for testing.          |
| **Screen Capture / Animations** | Capture renderings for documentation.        |
| **Application Settings**        | System and display configuration.            |



| **Plugin Type**        | **Purpose / What It Does**                                                                                                | **Implementation (How to Make It)**                                                                                                                                                                                                                                                   | **Defines / Customizes**                                                                                                           | **Examples (Built-in or Extensions)**                                                                                                                                                       |
| ---------------------- | ------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| üìù **Write Plugin**    | Adds or extends *data writing / export* capabilities for specific node types (e.g., saving special file formats).         | ‚Ä¢ Subclass of `qSlicerSubjectHierarchyAbstractPlugin` (C++) or `AbstractScriptedSubjectHierarchyPlugin` (Python).<br>‚Ä¢ Implement write logic in `writeData()` and define supported node types.<br>‚Ä¢ Register the plugin in the module‚Äôs `setup()` or `__init__()`.                    | ‚Ä¢ File type support<br>‚Ä¢ Export actions in context menu<br>‚Ä¢ Node-to-file mapping rules                                            | *Less common in core; examples appear in extensions that add export formats (e.g., SlicerRT for DICOM-RT, SlicerHeart for cardiac structures)*                                              |
| üß± **Role Plugin**     | Adds *support for new data node types* ‚Äî defines how they appear and behave in the Subject Hierarchy.                     | ‚Ä¢ Subclass `qSlicerSubjectHierarchyAbstractPlugin` (C++) or `AbstractScriptedSubjectHierarchyPlugin` (Python).<br>‚Ä¢ Implement node type ownership (`canOwnSubjectHierarchyItem`), icon, tooltip, visibility handling, help text, and display name.<br>‚Ä¢ Register during module setup. | ‚Ä¢ Ownership rules<br>‚Ä¢ Node icons and tooltips<br>‚Ä¢ Display visibility<br>‚Ä¢ Help text and edit properties<br>‚Ä¢ Displayed node name | **Core:** Markups, Models, SceneViews, Charts, Folder, Tables, Transforms, LabelMaps, Volumes<br>**Extensions:** Role plugin in *SlicerHeart* (cardiac nodes)                               |
| ‚öôÔ∏è **Function Plugin** | Adds *actions* (functions) to the **right-click context menu** for nodes or the scene ‚Äî allows custom operations on data. | ‚Ä¢ Subclass `qSlicerSubjectHierarchyAbstractPlugin` (C++) or `AbstractScriptedSubjectHierarchyPlugin` (Python).<br>‚Ä¢ Implement functions that define context menu actions (`nodeContextMenuActions`), specify applicable node types, and connect actions to logic.                     | ‚Ä¢ Context menu actions<br>‚Ä¢ Scene-level actions<br>‚Ä¢ Node-type filtering for actions<br>‚Ä¢ Action logic handlers                    | **Core:** CloneNode, ParseLocalData, Register, Segment, DICOM, Volumes, Markups, Models, Annotations, Segmentations, Segments<br>**Extensions:** Function plugin in *Segment Editor* module |

